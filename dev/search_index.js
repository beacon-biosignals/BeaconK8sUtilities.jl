var documenterSearchIndex = {"docs":
[{"location":"preferences/","page":"Preferences","title":"Preferences","text":"CurrentModule = BeaconK8sUtilities","category":"page"},{"location":"preferences/#Preferences","page":"Preferences","title":"Preferences","text":"","category":"section"},{"location":"preferences/","page":"Preferences","title":"Preferences","text":"BeaconK8sUtilities uses Preferences.jl to allow persisting preferences between sessions.","category":"page"},{"location":"preferences/","page":"Preferences","title":"Preferences","text":"Modules = [BeaconK8sUtilities]\nPages = [\"preferences.jl\"]\nPrivate = false","category":"page"},{"location":"preferences/#BeaconK8sUtilities.default_ecr","page":"Preferences","title":"BeaconK8sUtilities.default_ecr","text":"default_ecr() -> `ecr`\ndefault_ecr(ecr::AbstractString) -> `ecr`\n\nUses Preferences.jl to set or retrieve the default ECR.\n\n\n\n\n\n","category":"function"},{"location":"preferences/#BeaconK8sUtilities.default_service_account","page":"Preferences","title":"BeaconK8sUtilities.default_service_account","text":"default_service_account() -> `service_account`\ndefault_service_account(service_account::AbstractString) -> `service_account`\n\nUses Preferences.jl to set or retrieve the default service account.\n\n\n\n\n\n","category":"function"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"CurrentModule = BeaconK8sUtilities","category":"page"},{"location":"utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"As the name suggests, BeaconK8sUtilities provides several utilities for Julia-side management of Kubernetes pods, mostly intended for writing interactive scripts (such as those generated by our Templates).","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Modules = [BeaconK8sUtilities]\nPages = [\"utilities.jl\"]\nPrivate = false","category":"page"},{"location":"utilities/#BeaconK8sUtilities.follow-Tuple{Any}","page":"Utilities","title":"BeaconK8sUtilities.follow","text":"follow(pod; exit_on_interrupt=false, namespace=nothing)\n\nA simpler helper to follow a pod by first waiting until it's ready (wait_until_pod_ready) and then wathing its logs (watch_logs).\n\n\n\n\n\n","category":"method"},{"location":"utilities/#BeaconK8sUtilities.get_current_namespace-Tuple{}","page":"Utilities","title":"BeaconK8sUtilities.get_current_namespace","text":"get_current_namespace() -> String\n\nGet the current active Kubernetes namespace.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#BeaconK8sUtilities.get_pod_names","page":"Utilities","title":"BeaconK8sUtilities.get_pod_names","text":"get_pod_names(labels = ``; namespace=nothing) -> Vector{String}\n\nGet the names of pods in the current namespace (or pass a namespace to specify a different one). Pass labels as e.g. -l app=myapp to restrict to specific labels.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#BeaconK8sUtilities.get_status-Tuple{Any}","page":"Utilities","title":"BeaconK8sUtilities.get_status","text":"get_status(pod; namespace=nothing) -> String\n\nGet the status of a pod.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#BeaconK8sUtilities.last_condition-Tuple{Any}","page":"Utilities","title":"BeaconK8sUtilities.last_condition","text":"last_condition(pod; namespace=nothing) -> String\n\nGet the latest \"condition\" of a pod.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#BeaconK8sUtilities.port_forward-Tuple{Any}","page":"Utilities","title":"BeaconK8sUtilities.port_forward","text":"port_forward(pod; remote_port::Int, local_port::Int=remote_port, namespace=nothing) -> Task\n\nForwards a port from remote_port on pod to local_port. Runs in a detached process, and so will outlive the current Julia session. Returns the task running this process.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#BeaconK8sUtilities.wait_until_pod_ready-Tuple{Any}","page":"Utilities","title":"BeaconK8sUtilities.wait_until_pod_ready","text":"wait_until_pod_ready(pod; namespace=nothing)\n\nDisplay a progress bar while waiting for pod to become Running.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#BeaconK8sUtilities.watch_logs-Tuple{Any}","page":"Utilities","title":"BeaconK8sUtilities.watch_logs","text":"watch_logs(pod; exit_on_interrupt=false, namespace=nothing)\n\nFollows logs from pod. If exit_on_interrupt=true, exits the Julia session upon ctrl-c. Otherwise throws an error as usual upon interruption.\n\n\n\n\n\n","category":"method"},{"location":"internal/","page":"-","title":"-","text":"CurrentModule = BeaconK8sUtilities","category":"page"},{"location":"internal/#Internal-functionality","page":"-","title":"Internal functionality","text":"","category":"section"},{"location":"internal/","page":"-","title":"-","text":"These are internal functions for use within BeaconK8sUtilities; they may break or change functionality within non-breaking releases since they are not part of the public API.","category":"page"},{"location":"internal/","page":"-","title":"-","text":"Modules = [BeaconK8sUtilities]\nPublic = false\nPrivate = true","category":"page"},{"location":"internal/#BeaconK8sUtilities.gen_file-Tuple{Any, AbstractString}","page":"-","title":"BeaconK8sUtilities.gen_file","text":"gen_file(file, text::AbstractString)\n\nCreate a new file containing some given text. Trailing whitespace is removed, and the file will end with a newline.\n\n\n\n\n\n","category":"method"},{"location":"internal/#BeaconK8sUtilities.prefix_pod-Tuple{Any}","page":"-","title":"BeaconK8sUtilities.prefix_pod","text":"prefix_pod(name) -> AbstractString\n\nPrepends the prexfix pod/ to name if it does not already have it.\n\n\n\n\n\n","category":"method"},{"location":"templates/","page":"Templates","title":"Templates","text":"CurrentModule = BeaconK8sUtilities","category":"page"},{"location":"templates/#Templates","page":"Templates","title":"Templates","text":"","category":"section"},{"location":"templates/","page":"Templates","title":"Templates","text":"BeaconK8sUtilities currently supports one template: a template for creating scripts to setup tensorboard pods to follow the logs of a project.","category":"page"},{"location":"templates/","page":"Templates","title":"Templates","text":"Modules = [BeaconK8sUtilities]\nPages = [\"templates.jl\"]\nPrivate = false","category":"page"},{"location":"templates/#BeaconK8sUtilities.setup_follow-Tuple{AbstractString}","page":"Templates","title":"BeaconK8sUtilities.setup_follow","text":"setup_follow(destination::AbstractString;\n             namespace::AbstractString=get_current_namespace(), overwrite=false)\n\nSets up a follow.sh script in destination directory destination, which does not have to exist ahead of time.\n\nnamespace: name of the Kubernetes namespace to use. Defaults to the current active one introspected by get_current_namespace.\noverwrite: whether or not to overwrite existing configuration scripts.\n\nCreates:\n\n$destination/follow.sh: shell script to wait for a pod to be ready (with progress information) and then follow its logs.\n\n\n\n\n\n","category":"method"},{"location":"templates/#BeaconK8sUtilities.setup_tensorboard-Tuple{AbstractString}","page":"Templates","title":"BeaconK8sUtilities.setup_tensorboard","text":"setup_tensorboard(destination::AbstractString; app::AbstractString,\n                  logdir::AbstractString,\n                  ecr::AbstractString = default_ecr(),\n                  service_account::AbstractString = default_service_account(),\n                  namespace::AbstractString = get_current_namespace(),\n                  local_port::Int=6006, overwrite=false)\n\nSets up a tensorboard launch scripts in destination directory destination, which does not have to exist ahead of time.\n\napp: name of project/application/model that you are using tensorboard with (used for labelling the pods and keeping track of which is which)\nlogdir: log directory that tensorboard should be pointing at. May be an s3 URI\necr: name of the ECR repo to use to push docker images to. Can set this as a default with default_ecr.\nservice_account: name of the Kubernetes service account. Can set this as a default with default_service_account.\nnamespace: name of the Kubernetes namespace to use. Defaults to the current active one introspected by get_current_namespace.\nlocal_port: local port to use when port forwarding.\noverwrite: whether or not to overwrite existing configuration scripts.\n\nCreates:\n\n$destination/tensorboard.sh: shell script that either connects to an existing tensorboard pod or builds and launches a new tensorboard pod.\n$destination/tensorboard.dockerfile: dockerfile to build tensorboard with access to s3 log directories (used by tensorboard.sh)\n$destination/tensorboard.yaml: pod spec used to launch pods ((used by tensorboard.sh)\n\nThese are pre-populated using the keyword arguments passed here.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BeaconK8sUtilities","category":"page"},{"location":"#BeaconK8sUtilities","page":"Home","title":"BeaconK8sUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BeaconK8sUtilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
